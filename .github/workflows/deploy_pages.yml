name: Wait latex and deploy GitHub Pages

on:
  push:
    branches:
      - main

  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# -- However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# UPD: cancel in-progress, because we don't want it.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check installed locales
        run: locale -a

      - name: Wait for LaTeX compilation Workflows
        run: |
          while true; do
            echo "Waiting for finish of compilation..."
            sleep 10

            status_3=$(gh run list --workflow latex3.yml --json status -q '.[0].status')
            status_4=$(gh run list --workflow latex4.yml --json status -q '.[0].status')

            if [[ "$status_3" == "completed" && "$status_4" == "completed" ]]; then
              break
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Artifact from Build sem3
        run: |
          run_id_3=$(gh run list --workflow latex3.yml --json databaseId,conclusion -q '[.[] | select(.conclusion == "success")][0].databaseId')
          start_date_3=$(gh run list --workflow latex3.yml --json conclusion,createdAt -q '[.[] | select(.conclusion == "success")][0].createdAt')
          echo "Start date of sem3 workflow: $start_date_3"

          rus_full="$(LC_TIME=ru_RU.UTF-8 date -d "$start_date_3 +3 hours" +"%-d %B, в %H:%M")"
          # rus_plain="$(LC_TIME=ru_RU.UTF-8 date -d "$start_date_3 +3 hours" +"%-d %B %H:%M")"

          # echo "dtime3=$(date -d "$start_date_3 +3 hours" +"%m.%d, в %H:%M")" >> $GITHUB_ENV
          echo "dtime3_plain=$(date -d "$start_date_3 +3 hours" +"%m.%d %H:%M")" >> $GITHUB_ENV

          echo "dtime3=$rus_full" >> $GITHUB_ENV
          # echo "dtime3_plain=$rus_plain" >> $GITHUB_ENV

          gh run download $run_id_3 --name sem3_result
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Artifact from Build sem4
        run: |
          run_id_4=$(gh run list --workflow latex4.yml --json databaseId,conclusion -q '[.[] | select(.conclusion == "success")][0].databaseId')
          start_date_4=$(gh run list --workflow latex4.yml --json conclusion,createdAt -q '[.[] | select(.conclusion == "success")][0].createdAt')
          echo "Start date of sem4 workflow: $start_date_4"

          rus_full="$(LC_TIME=ru_RU.UTF-8 date -d "$start_date_4 +3 hours" +"%-d %B, в %H:%M")"
          # rus_plain="$(LC_TIME=ru_RU.UTF-8 date -d "$start_date_4 +3 hours" +"%-d %B %H:%M")"

          # echo "dtime4=$(date -d "$start_date_4 +3 hours" +"%m.%d, в %H:%M")" >> $GITHUB_ENV
          echo "dtime4_plain=$(date -d "$start_date_4 +3 hours" +"%m.%d %H:%M")" >> $GITHUB_ENV

          echo "dtime4=$rus_full" >> $GITHUB_ENV
          # echo "dtime4_plain=$rus_plain" >> $GITHUB_ENV

          gh run download $run_id_4 --name sem4_result
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate names
        run: |
          echo "name3=Теория Меры, Уважаемый (версия от ${{ env.dtime3_plain }}).pdf" >> $GITHUB_ENV
          echo "name4=Том и джерри. Начало (версия от ${{ env.dtime4_plain }}).pdf" >> $GITHUB_ENV
      - name: Rename files
        run: |
          mv result3.pdf "${{ env.name3 }}"
          mv result4.pdf "${{ env.name4 }}"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
        
      - name: Take ownership of _site directory
        run: sudo chown -R $USER:$USER ./_site

      - name: Replace placeholders
        run: |
          find ./_site -type f -name "*.html"
          find ./_site -type f -name "*.html" -exec sed -i "s|<h1>Идёт обновление. Обычно это занимает около 3 минут</h1>||g" {} +
          find ./_site -type f -name "*.html" -exec sed -i "s|<p>Так как сейчас идёт обновление, файл, доступный по кнопке выше и отображаемый снизу, может отставать от актуальной версии</p>||g" {} +
          find ./_site -type f -name "part3.html" -exec sed -i "s|sem3/main.pdf|${{ env.name3 }}|g" {} +
          find ./_site -type f -name "part3.html" -exec sed -i "s|{{LATEST_RELEASE_DATE}}|${{ env.dtime3 }}|g" {} +
          find ./_site -type f -name "index.html" -exec sed -i "s|sem4/main.pdf|${{ env.name4 }}|g" {} +
          find ./_site -type f -name "index.html" -exec sed -i "s|{{LATEST_RELEASE_DATE}}|${{ env.dtime4 }}|g" {} +

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3


  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
