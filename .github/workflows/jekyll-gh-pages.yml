# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  workflow_run:
    workflows: ["Build and deploy latex sources to GitHub Pages"]
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch latest release download URL
        id: fetch_latest_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          if echo "$RESPONSE" | jq -e '.assets' > /dev/null; then
            DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.assets[0].browser_download_url')
            echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          else
            echo "Error fetching latest release: $RESPONSE"
            exit 1
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Debug_Ð¾utput DOWNLOAD_URL
        run: echo "DOWNLOAD_URL=$DOWNLOAD_URL"
        
      - name: Ensure permissions for _site directory
        run: chmod -R u+w ./_site

      - name: Replace placeholder with download URL
        run: |
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: DOWNLOAD_URL is empty"
            exit 1
          fi
          find ./_site -type f -name "*.html" -exec sed -i "s|{{LATEST_RELEASE_DOWNLOAD_URL}}|$DOWNLOAD_URL|g" {} +


      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3


  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
